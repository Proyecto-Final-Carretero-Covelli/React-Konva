{"version":3,"sources":["components/Array.js","components/Variable.js","codeParser/vista-interactiva.js","components/MainTestView.js","App.js","serviceWorker.js","index.js"],"names":["Array","props","elementStartX","elementIndex","console","log","arrayItems","map","element","index","x","y","width","height","fill","text","align","verticalAlign","draggable","name","Variable","onClick","value","declaredArrays","declaredVariables","MainTestView","useState","stageScale","stageX","stageY","state","setState","testVariable","setValueTestVariable","itemCounter","arrays","array","variables","variable","variableX","event","prevState","style","display","justifyContent","alignItems","minHeight","minWidth","overflow","alignSelf","backgroundColor","onWheel","e","evt","preventDefault","stage","target","getStage","oldScale","scaleX","mousePointTo","getPointerPosition","newScale","deltaY","scaleY","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.acf2414c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Rect, Text, Group } from \"react-konva\";\r\nimport Konva from \"konva\";\r\n\r\nexport default function Array(props) {\r\n  const elementStartX = props.elementIndex * 100;\r\n  const sizeRect = 50;\r\n\r\n  console.log(props.arrayItems);\r\n\r\n  const arrayItems = props.arrayItems.map((element, index) => {\r\n    return (\r\n      <Group>\r\n        <Rect\r\n          x={elementStartX}\r\n          y={100 + sizeRect * index}\r\n          width={sizeRect}\r\n          height={sizeRect}\r\n          fill=\"grey\"\r\n        />\r\n        <Text\r\n          x={elementStartX}\r\n          y={100 + sizeRect * index}\r\n          text={index}\r\n          width={sizeRect}\r\n          height={sizeRect}\r\n          align=\"center\"\r\n          verticalAlign=\"middle\"\r\n          fill=\"white\"\r\n        />\r\n      </Group>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Group draggable=\"true\">\r\n      <Text\r\n        x={elementStartX}\r\n        y={50}\r\n        text={props.name}\r\n        width={sizeRect}\r\n        height={sizeRect}\r\n        align=\"center\"\r\n        verticalAlign=\"middle\"\r\n        fill=\"white\"\r\n      />\r\n      {arrayItems}\r\n    </Group>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Rect, Text, Group } from \"react-konva\";\r\n\r\nexport default function Variable(props) {\r\n  const elementStartX = props.elementIndex * 100;\r\n  const sizeRect = 50;\r\n\r\n  console.log(props);\r\n\r\n  return (\r\n    <Group draggable=\"true\" onClick={props.onClick}>\r\n      <Text\r\n        x={elementStartX}\r\n        y={50}\r\n        text={props.name}\r\n        width={sizeRect}\r\n        height={sizeRect}\r\n        align=\"center\"\r\n        verticalAlign=\"middle\"\r\n        fill=\"white\"\r\n      />\r\n      <Rect\r\n        x={elementStartX}\r\n        y={100}\r\n        width={sizeRect}\r\n        height={sizeRect}\r\n        fill=\"#3b6978\"\r\n      />\r\n      <Text\r\n        x={elementStartX}\r\n        y={100}\r\n        text={props.value}\r\n        width={sizeRect}\r\n        height={sizeRect}\r\n        align=\"center\"\r\n        verticalAlign=\"middle\"\r\n        fill=\"white\"\r\n      />\r\n    </Group>\r\n  );\r\n}\r\n","const declaredArrays = [\r\n  {\r\n    name: \"Array 1\",\r\n    value: [\r\n      1,\r\n      2,\r\n      3,\r\n      4,\r\n      5,\r\n      6,\r\n      7,\r\n      8,\r\n      9,\r\n      10,\r\n      11,\r\n      12,\r\n      13,\r\n      14,\r\n      15,\r\n      16,\r\n      17,\r\n      18,\r\n      19,\r\n      20,\r\n    ],\r\n  },\r\n  { name: \"Array 2\", value: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] },\r\n];\r\n\r\nconst declaredVariables = [\r\n  { name: \"Variable 1\", value: \"1\" },\r\n  { name: \"Variable 2\", value: \"String Value\" },\r\n  { name: \"Variable 3\", value: \"String Value\" },\r\n  { name: \"Variable 4\", value: \"String Value\" },\r\n  { name: \"Variable 5\", value: \"String Value\" },\r\n];\r\n\r\nexport { declaredVariables, declaredArrays };\r\n","import React, { useState } from \"react\";\r\nimport { Stage, Layer, Rect, Text, Group } from \"react-konva\";\r\nimport Konva from \"konva\";\r\nimport Array from \"./Array\";\r\nimport Variable from \"./Variable\";\r\nimport {\r\n  declaredVariables,\r\n  declaredArrays,\r\n} from \"../codeParser/vista-interactiva\";\r\n\r\nexport default function MainTestView() {\r\n  const [state, setState] = useState({ stageScale: 1, stageX: 0, stageY: 0 });\r\n  const [testVariable, setValueTestVariable] = useState({\r\n    name: \"Variable X\",\r\n    value: \"2\",\r\n  });\r\n  let itemCounter = 1;\r\n  const handleWheel = (e) => {\r\n    // Posible transformacion a Custom Hook\r\n    e.evt.preventDefault();\r\n\r\n    const scaleBy = 1.1;\r\n    const stage = e.target.getStage();\r\n    const oldScale = stage.scaleX();\r\n    const mousePointTo = {\r\n      x: stage.getPointerPosition().x / oldScale - stage.x() / oldScale,\r\n      y: stage.getPointerPosition().y / oldScale - stage.y() / oldScale,\r\n    };\r\n\r\n    const newScale = e.evt.deltaY > 0 ? oldScale / scaleBy : oldScale * scaleBy;\r\n\r\n    setState({\r\n      stageScale: newScale,\r\n      stageX:\r\n        -(mousePointTo.x - stage.getPointerPosition().x / newScale) * newScale,\r\n      stageY:\r\n        -(mousePointTo.y - stage.getPointerPosition().y / newScale) * newScale,\r\n    });\r\n  };\r\n\r\n  const arrays = declaredArrays.map((array) => {\r\n    return (\r\n      <Array\r\n        name={array.name}\r\n        arrayItems={array.value}\r\n        elementIndex={itemCounter++}\r\n      />\r\n    );\r\n  });\r\n\r\n  const variables = declaredVariables.map((variable) => {\r\n    return (\r\n      <Variable\r\n        name={variable.name}\r\n        value={variable.value}\r\n        elementIndex={itemCounter++}\r\n      />\r\n    );\r\n  });\r\n\r\n  const handleClickVarX = (event) => {\r\n    console.log(\"hi\");\r\n    setValueTestVariable((prevState) => ({\r\n      ...prevState,\r\n      value: prevState.value++,\r\n    }));\r\n  };\r\n\r\n  const variableX = (\r\n    <Variable\r\n      name={testVariable.name}\r\n      value={testVariable.value}\r\n      elementIndex={itemCounter++}\r\n      onClick={handleClickVarX}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        minHeight: \"100vh\",\r\n        minWidth: \"100vw\",\r\n      }}\r\n    >\r\n      <div style={{ overflow: \"scroll\" }}>\r\n        <Stage\r\n          style={{ alignSelf: \"center\", backgroundColor: \"#44475A\" }}\r\n          width=\"500\"\r\n          height=\"500\"\r\n          onWheel={handleWheel}\r\n          scaleX={state.stageScale}\r\n          scaleY={state.stageScale}\r\n          x={state.stageX}\r\n          y={state.stageY}\r\n          draggable=\"true\"\r\n        >\r\n          <Layer>\r\n            {arrays}\r\n            {variables}\r\n            {variableX}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport MainTestView from \"./components/MainTestView\";\n\nfunction App() {\n  return (\n    <div style={{ backgroundColor: \"#282A36\" }}>\n      <MainTestView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}